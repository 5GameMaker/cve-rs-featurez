#![deny(unsafe_code)]
#![deny(clippy::pedantic)]
#![deny(clippy::nursery)]

fn main() {
	let mut args = std::env::args();
	let _program = args.next();
	let Some(subcommand) = args.next() else {
		println!("{HELP}");
		return;
	};

	match subcommand.as_str() {
		"uaf" => cve_rs::use_after_free::use_after_free(),
		"segfault" => cve_rs::segfault::segfault(),
		"bo" => cve_rs::buffer_overflow::buffer_overflow(),
		"transition" => cve_rs::transmute::transmute_bin(),
		"help" | "h" | "?" | "--help" | "-h" => println!("{HELP}"),
		other => println!("Error: Unknown command `{other}`.\n{HELP}"),
	}
}

const HELP: &str = r"
cve-rs: Blazingly fast CVEs, written in 100% safe rust.

This program exploits a soundness hole in lifetimes that lets us cast any lifetime to 'static, allowing us to create dangling references.
See: https://github.com/rust-lang/rust/issues/25860

This program is open-source! View the source for all these exploits here: https://github.com/Speykious/cve-rs

Commands:
    help        Show this help message.
    uaf         Run the use-after-free CVE.
    bo          Run the buffer overflow CVE. Optionally take a shower.
    transition  Run a safe implementation of mem::transmute. Convert A to B, or B(oy) to G(irl).
    segfault    Run the segfault CVE.
";
